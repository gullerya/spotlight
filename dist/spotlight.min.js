const t=Symbol("parent.key"),e=Symbol("target.key"),n=Symbol("shape.key"),o=Symbol("td.key"),r=Symbol("render.key"),i=Symbol("coords.extractor.key"),s=Object.freeze({circle:"circle",oval:"oval",box:"box"}),a=s.circle,h=333,l=Object.freeze({shape:s.circle,transitionDuration:h});export{s as SHAPES,c as spotlight};function c(e,n,r){const i=Object.assign({},l,r,{target:e,parent:n||document.body});!function(t){if(!t.target||t.target.nodeType!==Node.ELEMENT_NODE||t.target===document.body)throw new Error("invalid target ("+t.target+")");if(!t.parent||t.parent.nodeType!==Node.ELEMENT_NODE)throw new Error("invalid parent ("+t.parent+")");if(!t.parent.contains(t.target)||t.parent===t.target)throw new Error("target MUST be a child of a given parent; they MAY NOT be the same element");t.shape&&t.shape in s||(console.error("invalid shape ("+t.shape+"), falling back to the default ("+a+")"),t.shape=a);t.transitionDuration&&"number"==typeof t.transitionDuration||(console.error("invalid transition duration ("+t.transitionDuration+"), falling back to the default ("+h+")"),t.transitionDuration=h)}(i);const c=document.createElement("spotlight-scene");return c[t]=i.parent,c.shape=i.shape,c[o]=i.transitionDuration,c.target=i.target,c[t].appendChild(c),c}const d=document.createElement("template");d.innerHTML='\n\t<style>\n\t\t:host {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tz-index: 999;\n\t\t\toverflow: hidden;\n\t\t}\n\n\t\t:host(.shown) .spotlight {\n\t\t\tborder-color: rgba(0, 0, 0, 0.5);\n\t\t}\n\t\t:host(.shown) .inner-fence {\n\t\t\tborder-color: rgba(255, 255, 0, 1);\n\t\t}\n\n\t\t.spotlight {\n\t\t\tposition: absolute;\n\t\t\tborder: 200vmax solid;\n\t\t\tborder-color: rgba(0, 0, 0, 0);\n\t\t\ttransform: translate(-50%, -50%);\n\t\t\ttransition: all var(--t-d);\n\t\t}\n\n\t\t.inner-fence {\n\t\t\tposition: absolute;\n\t\t\ttop: 50%;\n\t\t\tleft: 50%;\n\t\t\twidth: calc(100% - 2px);\n\t\t\theight: calc(100% - 2px);\n\t\t\ttransform: translate(-50%, -50%);\n\t\t\tborder: 3px solid;\n\t\t\tborder-color: rgba(255, 255, 0, 0);\n\t\t\ttransition: all var(--t-d);\n\t\t}\n\n\t\t.box,\n\t\t.box > .inner-fence {\n\t\t\tborder-radius: calc(200vmax + 24px);\n\t\t}\n\n\t\t.oval,\n\t\t.oval > .inner-fence {\n\t\t\tborder-radius: 50%;\n\t\t}\n\n\t\t.circle,\n\t\t.circle > .inner-fence {\n\t\t\tborder-radius: 50%;\n\t\t}\n\t</style>\n\n\t<div class="spotlight">\n\t\t<div class="inner-fence"></div>\n\t</div>\n',customElements.define("spotlight-scene",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).appendChild(d.content.cloneNode(!0))}connectedCallback(){this.shadowRoot.host.style.setProperty("--t-d",this[o]+"ms"),"number"==typeof this.offsetWidth&&this.classList.add("shown")}get parent(){return this[t]}get shape(){return this[n]}set shape(t){this[n]!==t&&(this[n]=t,this[r]())}get transitionDuration(){return this[o]}set transitionDuration(t){t&&"number"==typeof t?(this[o]=t,this.shadowRoot.host.style.setProperty("--t-d",this[o]+"ms")):console.error("invalid transition duration ("+t+"), staying on the present value ("+this[o]+")")}get target(){return this[e]}set target(t){this.moveTo(t)}moveTo(n){if(this[e]===n)return Promise.resolve();if(!n||n.nodeType!==Node.ELEMENT_NODE||n===document.body)throw new Error("invalid target");if(!this[t].contains(n)||this[t]===n)throw new Error("target MUST be a child of a given parent; they MAY NOT be the same element");return this[e]=n,this[r]()}close(){return this.classList.remove("shown"),new Promise(e=>{setTimeout(()=>{this[t].removeChild(this),e()},this[o])})}[r](){if(!this[e])return;const t=this[i](this[e]);let r,a,h;switch(this[n]){case s.box:r=t.width+24,a=t.height+24,h=s.box;break;case s.oval:r=t.width*Math.pow(2,.5),a=t.height*Math.pow(2,.5),h=s.oval;break;case s.circle:default:r=a=Math.pow(Math.pow(t.width,2)+Math.pow(t.height,2),.5)+12,h=s.circle}const l=this.shadowRoot.querySelector(".spotlight");return new Promise(e=>{l.className="spotlight "+h,Object.assign(l.style,{top:t.y+t.height/2+"px",left:t.x+t.width/2+"px",width:r+"px",height:a+"px"}),setTimeout(e,this[o])})}[i](t){return t.getBoundingClientRect()}});